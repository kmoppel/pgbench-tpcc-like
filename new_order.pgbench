/*
SPEC: For any given terminal, the home warehouse number (W_ID) is constant over the whole measurement interval (see Clause 5.5).
Let's use Postgres session vars for that -- client_id
*/

SELECT coalesce(current_setting('tpcc_like.client_id_'||:client_id, true)::int8, 0) AS w_id \gset

\if :w_id
    SELECT 'OK - session is using w_id ' || :w_id ;
\else
    -- Pick a random warehouse for the whole duration of the session
    SELECT w_id AS w_id FROM warehouse ORDER BY random() LIMIT 1 \gset
    SELECT set_config( 'tpcc_like.client_id_'|| :client_id, ':w_id', false) ;
\endif

\set d_id random(1, 10)

-- SPEC: The non-uniform random customer number (C_ID) is selected using the NURand (1023,1,3000) function
-- Here: just apply Pareto, i.e. 20% of hot customers (3K per district)
\set c_id random(1, 600)
-- 2.4.1.3 The number of items in the order (ol_cnt) is randomly selected within [5 .. 15] (an average of 10)
\set ol_cnt random(5, 15)

BEGIN;

-- 1. Get district and warehouse tax
SELECT d_tax, w_tax FROM district d JOIN warehouse w ON w.w_id = d.d_w_id WHERE d_w_id = :w_id AND d_id = :d_id \gset

-- 2. Get customer discount and credit status
SELECT c_discount, c_last, c_credit
FROM customer
WHERE c_w_id = :w_id AND c_d_id = :d_id AND c_id = :c_id \gset

-- 3. Update district's next order ID
UPDATE district
SET d_next_o_id = d_next_o_id + 1
WHERE d_w_id = :w_id AND d_id = :d_id
RETURNING d_next_o_id AS o_id \gset

-- 4. Insert new order into ORDERS
INSERT INTO oorder (o_id, o_d_id, o_w_id, o_c_id, o_entry_d, o_ol_cnt, o_all_local)
VALUES (:o_id, :d_id, :w_id, :c_id, now(), :ol_cnt, 1);

-- 5. Insert into NEW_ORDER
INSERT INTO new_order (no_o_id, no_d_id, no_w_id)
VALUES (:o_id, :d_id, :w_id);

SELECT tpcc_utils.new_order_add_line_items(:w_id, :d_id, :o_id, :ol_cnt, :d_tax, :w_tax, :c_discount);

COMMIT;
